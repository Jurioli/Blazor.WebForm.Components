@using Blazor.WebForm.UI;
@using Blazor.WebForm.UI.ControlComponents;
@using System.Web.UI;
@using System.Web.UI.WebControls;
@inherits BaseDataListControlComponent<System.Web.UI.WebControls.DataList>
@this.RenderWithCascading(this.Control, this.ChildContent, this.ChildLevel)
@code {
    private DataListItemEventHandler _itemDataBound;
    private DataListItemEventHandler _itemCreated;
    private DataListCommandEventHandler _itemCommand;
    private DataListCommandEventHandler _editCommand;
    private DataListCommandEventHandler _deleteCommand;
    private DataListCommandEventHandler _cancelCommand;
    private DataListCommandEventHandler _updateCommand;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int ChildLevel { get; set; } = 1;

    [Parameter]
    public int RepeatColumns
    {
        get
        {
            return this.Control.RepeatColumns;
        }
        set
        {
            this.Control.RepeatColumns = value;
        }
    }

    [Parameter]
    public RepeatDirection RepeatDirection
    {
        get
        {
            return this.Control.RepeatDirection;
        }
        set
        {
            this.Control.RepeatDirection = value;
        }
    }

    [Parameter]
    public RepeatLayout RepeatLayout
    {
        get
        {
            return this.Control.RepeatLayout;
        }
        set
        {
            this.Control.RepeatLayout = value;
        }
    }

    [Parameter]
    public bool ShowFooter
    {
        get
        {
            return this.Control.ShowFooter;
        }
        set
        {
            this.Control.ShowFooter = value;
        }
    }

    [Parameter]
    public bool ShowHeader
    {
        get
        {
            return this.Control.ShowHeader;
        }
        set
        {
            this.Control.ShowHeader = value;
        }
    }

    [Parameter]
    public int SelectedIndex
    {
        get
        {
            return this.Control.SelectedIndex;
        }
        set
        {
            if (!this.Initialized)
            {
                return;
            }
            this.Control.SelectedIndex = value;
        }
    }

    [Parameter]
    public bool ExtractTemplateRows
    {
        get
        {
            return this.Control.ExtractTemplateRows;
        }
        set
        {
            this.Control.ExtractTemplateRows = value;
        }
    }

    [Parameter]
    public int EditItemIndex
    {
        get
        {
            return this.Control.EditItemIndex;
        }
        set
        {
            if (!this.Initialized)
            {
                return;
            }
            this.Control.EditItemIndex = value;
        }
    }

    protected override void SetInnerPropertyWithCascading(IReadOnlyDictionary<string, object> parameters)
    {
        if (parameters.TryGetValue(nameof(this.SelectedIndex), out object value1) && value1 is int selectedIndex)
        {
            if (this.SelectedIndex != selectedIndex)
            {
                this.SelectedIndex = selectedIndex;
            }
        }
        if (parameters.TryGetValue(nameof(this.EditItemIndex), out object value2) && value2 is int editItemIndex)
        {
            if (this.EditItemIndex != editItemIndex)
            {
                this.EditItemIndex = editItemIndex;
            }
        }
    }

    [Parameter]
    public DataListItemEventHandler OnItemDataBound
    {
        get
        {
            return _itemDataBound;
        }
        set
        {
            if (value != null)
            {
                this.Control.ItemDataBound += InvokeItemDataBound;
            }
            else
            {
                this.Control.ItemDataBound -= InvokeItemDataBound;
            }
            _itemDataBound = value;
        }
    }

    [Parameter]
    public DataListItemEventHandler OnItemCreated
    {
        get
        {
            return _itemCreated;
        }
        set
        {
            if (value != null)
            {
                this.Control.ItemCreated += InvokeItemCreated;
            }
            else
            {
                this.Control.ItemCreated -= InvokeItemCreated;
            }
            _itemCreated = value;
        }
    }

    [Parameter]
    public DataListCommandEventHandler OnItemCommand
    {
        get
        {
            return _itemCommand;
        }
        set
        {
            if (value != null)
            {
                this.Control.ItemCommand += InvokeItemCommand;
            }
            else
            {
                this.Control.ItemCommand -= InvokeItemCommand;
            }
            _itemCommand = value;
        }
    }

    [Parameter]
    public DataListCommandEventHandler OnEditCommand
    {
        get
        {
            return _editCommand;
        }
        set
        {
            if (value != null)
            {
                this.Control.EditCommand += InvokeEditCommand;
            }
            else
            {
                this.Control.EditCommand -= InvokeEditCommand;
            }
            _editCommand = value;
        }
    }

    [Parameter]
    public DataListCommandEventHandler OnDeleteCommand
    {
        get
        {
            return _deleteCommand;
        }
        set
        {
            if (value != null)
            {
                this.Control.DeleteCommand += InvokeDeleteCommand;
            }
            else
            {
                this.Control.DeleteCommand -= InvokeDeleteCommand;
            }
            _deleteCommand = value;
        }
    }

    [Parameter]
    public DataListCommandEventHandler OnCancelCommand
    {
        get
        {
            return _cancelCommand;
        }
        set
        {
            if (value != null)
            {
                this.Control.CancelCommand += InvokeCancelCommand;
            }
            else
            {
                this.Control.CancelCommand -= InvokeCancelCommand;
            }
            _cancelCommand = value;
        }
    }

    [Parameter]
    public DataListCommandEventHandler OnUpdateCommand
    {
        get
        {
            return _updateCommand;
        }
        set
        {
            if (value != null)
            {
                this.Control.UpdateCommand += InvokeUpdateCommand;
            }
            else
            {
                this.Control.UpdateCommand -= InvokeUpdateCommand;
            }
            _updateCommand = value;
        }
    }

    private void InvokeItemDataBound(object sender, DataListItemEventArgs e)
    {
        _itemDataBound.Invoke(sender, e);
    }

    private void InvokeItemCreated(object sender, DataListItemEventArgs e)
    {
        _itemCreated.Invoke(sender, e);
    }

    private void InvokeItemCommand(object source, DataListCommandEventArgs e)
    {
        _itemCommand.Invoke(source, e);
    }

    private void InvokeEditCommand(object source, DataListCommandEventArgs e)
    {
        _editCommand.Invoke(source, e);
    }

    private void InvokeDeleteCommand(object source, DataListCommandEventArgs e)
    {
        _deleteCommand.Invoke(source, e);
    }

    private void InvokeCancelCommand(object source, DataListCommandEventArgs e)
    {
        _cancelCommand.Invoke(source, e);
    }

    private void InvokeUpdateCommand(object source, DataListCommandEventArgs e)
    {
        _updateCommand.Invoke(source, e);
    }
}
