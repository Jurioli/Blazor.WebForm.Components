@using Blazor.WebForm.UI;
@using Blazor.WebForm.UI.ControlComponents;
@using System.Web.UI;
@using System.Web.UI.WebControls;
@inherits ImageWebControlComponent<System.Web.UI.WebControls.ImageMap>
@this.RenderWithCascading(this.Control, this.ChildContent)
@code {
    private ImageMapEventHandler _click;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string AlternateText
    {
        get
        {
            return this.Control.AlternateText;
        }
        set
        {
            this.Control.AlternateText = value;
        }
    }

    [Parameter]
    public string DescriptionUrl
    {
        get
        {
            return this.Control.DescriptionUrl;
        }
        set
        {
            this.Control.DescriptionUrl = value;
        }
    }

    [Parameter]
    public bool GenerateEmptyAlternateText
    {
        get
        {
            return this.Control.GenerateEmptyAlternateText;
        }
        set
        {
            this.Control.GenerateEmptyAlternateText = value;
        }
    }

    [Parameter]
    public ImageAlign ImageAlign
    {
        get
        {
            return this.Control.ImageAlign;
        }
        set
        {
            this.Control.ImageAlign = value;
        }
    }

    [Parameter]
    public string ImageUrl
    {
        get
        {
            return this.Control.ImageUrl;
        }
        set
        {
            this.Control.ImageUrl = value;
        }
    }

    [Parameter]
    public HotSpotMode HotSpotMode
    {
        get
        {
            return this.Control.HotSpotMode;
        }
        set
        {
            this.Control.HotSpotMode = value;
        }
    }

    [Parameter]
    public string Target
    {
        get
        {
            return this.Control.Target;
        }
        set
        {
            this.Control.Target = value;
        }
    }

    [Parameter]
    public ImageMapEventHandler OnClick
    {
        get
        {
            return _click;
        }
        set
        {
            if (value != null)
            {
                this.Control.Click += InvokeClick;
            }
            else
            {
                this.Control.Click -= InvokeClick;
            }
            _click = value;
        }
    }

    private void InvokeClick(object sender, ImageMapEventArgs e)
    {
        _click.Invoke(sender, e);
    }
}
