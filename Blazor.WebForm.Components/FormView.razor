@using Blazor.WebForm.UI;
@using Blazor.WebForm.UI.ControlComponents;
@using System.Web.UI;
@using System.Web.UI.WebControls;
@inherits DataBoundControlComponent<System.Web.UI.WebControls.FormView>
@this.RenderWithCascading(this.Control, this.ChildContent, this.ChildLevel)
@code {
    private FormViewCommandEventHandler _itemCommand;
    private FormViewDeletedEventHandler _itemDeleted;
    private FormViewDeleteEventHandler _itemDeleting;
    private FormViewInsertedEventHandler _itemInserted;
    private FormViewInsertEventHandler _itemInserting;
    private FormViewUpdatedEventHandler _itemUpdated;
    private FormViewUpdateEventHandler _itemUpdating;
    private FormViewPageEventHandler _pageIndexChanging;
    private FormViewModeEventHandler _modeChanging;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int ChildLevel { get; set; } = 1;

    [Parameter]
    public bool RenderOuterTable
    {
        get
        {
            return this.Control.RenderOuterTable;
        }
        set
        {
            this.Control.RenderOuterTable = value;
        }
    }

    //[Parameter]
    //public string UpdateMethod
    //{
    //    get
    //    {
    //        return this.Control.UpdateMethod;
    //    }
    //    set
    //    {
    //        this.Control.UpdateMethod = value;
    //    }
    //}

    //[Parameter]
    //public string DeleteMethod
    //{
    //    get
    //    {
    //        return this.Control.DeleteMethod;
    //    }
    //    set
    //    {
    //        this.Control.DeleteMethod = value;
    //    }
    //}

    //[Parameter]
    //public string InsertMethod
    //{
    //    get
    //    {
    //        return this.Control.InsertMethod;
    //    }
    //    set
    //    {
    //        this.Control.InsertMethod = value;
    //    }
    //}

    [Parameter]
    public bool AllowPaging
    {
        get
        {
            return this.Control.AllowPaging;
        }
        set
        {
            this.Control.AllowPaging = value;
        }
    }

    [Parameter]
    public string BackImageUrl
    {
        get
        {
            return this.Control.BackImageUrl;
        }
        set
        {
            this.Control.BackImageUrl = value;
        }
    }

    [Parameter]
    public string Caption
    {
        get
        {
            return this.Control.Caption;
        }
        set
        {
            this.Control.Caption = value;
        }
    }

    [Parameter]
    public TableCaptionAlign CaptionAlign
    {
        get
        {
            return this.Control.CaptionAlign;
        }
        set
        {
            this.Control.CaptionAlign = value;
        }
    }

    [Parameter]
    public int CellPadding
    {
        get
        {
            return this.Control.CellPadding;
        }
        set
        {
            this.Control.CellPadding = value;
        }
    }

    [Parameter]
    public int CellSpacing
    {
        get
        {
            return this.Control.CellSpacing;
        }
        set
        {
            this.Control.CellSpacing = value;
        }
    }

    [Parameter]
    public bool EnableModelValidation
    {
        get
        {
            return this.Control.EnableModelValidation;
        }
        set
        {
            this.Control.EnableModelValidation = value;
        }
    }

    [Parameter]
    public string DataKeyNames
    {
        get
        {
            return this.ConvertToString<StringArrayConverter, string[]>(this.Control.DataKeyNames);
        }
        set
        {
            this.Control.DataKeyNames = this.ConvertFromString<StringArrayConverter, string[]>(value);
        }
    }

    [Parameter]
    public FormViewMode DefaultMode
    {
        get
        {
            return this.Control.DefaultMode;
        }
        set
        {
            this.Control.DefaultMode = value;
        }
    }

    [Parameter]
    public string FooterText
    {
        get
        {
            return this.Control.FooterText;
        }
        set
        {
            this.Control.FooterText = value;
        }
    }

    [Parameter]
    public GridLines GridLines
    {
        get
        {
            return this.Control.GridLines;
        }
        set
        {
            this.Control.GridLines = value;
        }
    }

    [Parameter]
    public int PageIndex
    {
        get
        {
            return this.Control.PageIndex;
        }
        set
        {
            if (!this.Initialized)
            {
                return;
            }
            this.Control.PageIndex = value;
        }
    }

    [Parameter]
    public string HeaderText
    {
        get
        {
            return this.Control.HeaderText;
        }
        set
        {
            this.Control.HeaderText = value;
        }
    }

    [Parameter]
    public string EmptyDataText
    {
        get
        {
            return this.Control.EmptyDataText;
        }
        set
        {
            this.Control.EmptyDataText = value;
        }
    }

    [Parameter]
    public HorizontalAlign HorizontalAlign
    {
        get
        {
            return this.Control.HorizontalAlign;
        }
        set
        {
            this.Control.HorizontalAlign = value;
        }
    }

    protected override void SetInnerPropertyWithCascading(IReadOnlyDictionary<string, object> parameters)
    {
        if (parameters.TryGetValue(nameof(this.PageIndex), out object value) && value is int pageIndex)
        {
            if (this.PageIndex != pageIndex)
            {
                this.PageIndex = pageIndex;
            }
        }
    }

    [Parameter]
    public EventHandler OnPageIndexChanged
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.PageIndexChanged += i, i => this.Control.PageIndexChanged -= i);
        }
    }

    [Parameter]
    public FormViewCommandEventHandler OnItemCommand
    {
        get
        {
            return _itemCommand;
        }
        set
        {
            if (value != null)
            {
                this.Control.ItemCommand += InvokeItemCommand;
            }
            else
            {
                this.Control.ItemCommand -= InvokeItemCommand;
            }
            _itemCommand = value;
        }
    }

    [Parameter]
    public EventHandler OnItemCreated
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.ItemCreated += i, i => this.Control.ItemCreated -= i);
        }
    }

    [Parameter]
    public FormViewDeletedEventHandler OnItemDeleted
    {
        get
        {
            return _itemDeleted;
        }
        set
        {
            if (value != null)
            {
                this.Control.ItemDeleted += InvokeItemDeleted;
            }
            else
            {
                this.Control.ItemDeleted -= InvokeItemDeleted;
            }
            _itemDeleted = value;
        }
    }

    [Parameter]
    public FormViewDeleteEventHandler OnItemDeleting
    {
        get
        {
            return _itemDeleting;
        }
        set
        {
            if (value != null)
            {
                this.Control.ItemDeleting += InvokeItemDeleting;
            }
            else
            {
                this.Control.ItemDeleting -= InvokeItemDeleting;
            }
            _itemDeleting = value;
        }
    }

    [Parameter]
    public FormViewInsertedEventHandler OnItemInserted
    {
        get
        {
            return _itemInserted;
        }
        set
        {
            if (value != null)
            {
                this.Control.ItemInserted += InvokeItemInserted;
            }
            else
            {
                this.Control.ItemInserted -= InvokeItemInserted;
            }
            _itemInserted = value;
        }
    }

    [Parameter]
    public FormViewInsertEventHandler OnItemInserting
    {
        get
        {
            return _itemInserting;
        }
        set
        {
            if (value != null)
            {
                this.Control.ItemInserting += InvokeItemInserting;
            }
            else
            {
                this.Control.ItemInserting -= InvokeItemInserting;
            }
            _itemInserting = value;
        }
    }

    [Parameter]
    public FormViewUpdatedEventHandler OnItemUpdated
    {
        get
        {
            return _itemUpdated;
        }
        set
        {
            if (value != null)
            {
                this.Control.ItemUpdated += InvokeItemUpdated;
            }
            else
            {
                this.Control.ItemUpdated -= InvokeItemUpdated;
            }
            _itemUpdated = value;
        }
    }

    [Parameter]
    public FormViewUpdateEventHandler OnItemUpdating
    {
        get
        {
            return _itemUpdating;
        }
        set
        {
            if (value != null)
            {
                this.Control.ItemUpdating += InvokeItemUpdating;
            }
            else
            {
                this.Control.ItemUpdating -= InvokeItemUpdating;
            }
            _itemUpdating = value;
        }
    }

    [Parameter]
    public FormViewPageEventHandler OnPageIndexChanging
    {
        get
        {
            return _pageIndexChanging;
        }
        set
        {
            if (value != null)
            {
                this.Control.PageIndexChanging += InvokePageIndexChanging;
            }
            else
            {
                this.Control.PageIndexChanging -= InvokePageIndexChanging;
            }
            _pageIndexChanging = value;
        }
    }

    [Parameter]
    public FormViewModeEventHandler OnModeChanging
    {
        get
        {
            return _modeChanging;
        }
        set
        {
            if (value != null)
            {
                this.Control.ModeChanging += InvokeModeChanging;
            }
            else
            {
                this.Control.ModeChanging -= InvokeModeChanging;
            }
            _modeChanging = value;
        }
    }

    [Parameter]
    public EventHandler OnModeChanged
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.ModeChanged += i, i => this.Control.ModeChanged -= i);
        }
    }

    private void InvokeItemCommand(object sender, FormViewCommandEventArgs e)
    {
        _itemCommand.Invoke(sender, e);
    }

    private void InvokeItemDeleted(object sender, FormViewDeletedEventArgs e)
    {
        _itemDeleted.Invoke(sender, e);
    }

    private void InvokeItemDeleting(object sender, FormViewDeleteEventArgs e)
    {
        _itemDeleting.Invoke(sender, e);
    }

    private void InvokeItemInserted(object sender, FormViewInsertedEventArgs e)
    {
        _itemInserted.Invoke(sender, e);
    }

    private void InvokeItemInserting(object sender, FormViewInsertEventArgs e)
    {
        _itemInserting.Invoke(sender, e);
    }

    private void InvokeItemUpdated(object sender, FormViewUpdatedEventArgs e)
    {
        _itemUpdated.Invoke(sender, e);
    }

    private void InvokeItemUpdating(object sender, FormViewUpdateEventArgs e)
    {
        _itemUpdating.Invoke(sender, e);
    }

    private void InvokeModeChanging(object sender, FormViewModeEventArgs e)
    {
        _modeChanging.Invoke(sender, e);
    }

    private void InvokePageIndexChanging(object sender, FormViewPageEventArgs e)
    {
        _pageIndexChanging.Invoke(sender, e);
    }
}
