@using Blazor.WebForm.UI
@using Blazor.WebForm.UI.ControlComponents
@using System.Web.UI
@using System.Web.UI.WebControls
@inherits WebControlComponent<System.Web.UI.WebControls.Calendar>
@this.RenderWithCascading(this.Control, this.ChildContent)
@code {
    private DayRenderEventHandler _dayRender;
    private MonthChangedEventHandler _visibleMonthChanged;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public CalendarSelectionMode SelectionMode
    {
        get
        {
            return this.Control.SelectionMode;
        }
        set
        {
            this.Control.SelectionMode = value;
        }
    }

    [Parameter]
    public string SelectMonthText
    {
        get
        {
            return this.Control.SelectMonthText;
        }
        set
        {
            this.Control.SelectMonthText = value;
        }
    }

    [Parameter]
    public string SelectWeekText
    {
        get
        {
            return this.Control.SelectWeekText;
        }
        set
        {
            this.Control.SelectWeekText = value;
        }
    }

    [Parameter]
    public bool ShowDayHeader
    {
        get
        {
            return this.Control.ShowDayHeader;
        }
        set
        {
            this.Control.ShowDayHeader = value;
        }
    }

    [Parameter]
    public bool ShowGridLines
    {
        get
        {
            return this.Control.ShowGridLines;
        }
        set
        {
            this.Control.ShowGridLines = value;
        }
    }

    [Parameter]
    public bool ShowNextPrevMonth
    {
        get
        {
            return this.Control.ShowNextPrevMonth;
        }
        set
        {
            this.Control.ShowNextPrevMonth = value;
        }
    }

    [Parameter]
    public bool ShowTitle
    {
        get
        {
            return this.Control.ShowTitle;
        }
        set
        {
            this.Control.ShowTitle = value;
        }
    }

    [Parameter]
    public bool AllowTitleSelecting
    {
        get
        {
            return this.Control.AllowTitleSelecting;
        }
        set
        {
            this.Control.AllowTitleSelecting = value;
        }
    }

    [Parameter]
    public TitleFormat TitleFormat
    {
        get
        {
            return this.Control.TitleFormat;
        }
        set
        {
            this.Control.TitleFormat = value;
        }
    }

    [Parameter]
    public bool UseAccessibleHeader
    {
        get
        {
            return this.Control.UseAccessibleHeader;
        }
        set
        {
            this.Control.UseAccessibleHeader = value;
        }
    }

    [Parameter]
    public DateTime VisibleDate
    {
        get
        {
            return this.Control.VisibleDate;
        }
        set
        {
            this.Control.VisibleDate = value;
        }
    }

    [Parameter]
    public DateTime SelectedDate
    {
        get
        {
            return this.Control.SelectedDate;
        }
        set
        {
            this.Control.SelectedDate = value;
        }
    }

    [Parameter]
    public string PrevMonthText
    {
        get
        {
            return this.Control.PrevMonthText;
        }
        set
        {
            this.Control.PrevMonthText = value;
        }
    }

    [Parameter]
    public string Caption
    {
        get
        {
            return this.Control.Caption;
        }
        set
        {
            this.Control.Caption = value;
        }
    }

    [Parameter]
    public NextPrevFormat NextPrevFormat
    {
        get
        {
            return this.Control.NextPrevFormat;
        }
        set
        {
            this.Control.NextPrevFormat = value;
        }
    }

    [Parameter]
    public string NextMonthText
    {
        get
        {
            return this.Control.NextMonthText;
        }
        set
        {
            this.Control.NextMonthText = value;
        }
    }

    [Parameter]
    public FirstDayOfWeek FirstDayOfWeek
    {
        get
        {
            return this.Control.FirstDayOfWeek;
        }
        set
        {
            this.Control.FirstDayOfWeek = value;
        }
    }

    [Parameter]
    public DayNameFormat DayNameFormat
    {
        get
        {
            return this.Control.DayNameFormat;
        }
        set
        {
            this.Control.DayNameFormat = value;
        }
    }

    [Parameter]
    public int CellSpacing
    {
        get
        {
            return this.Control.CellSpacing;
        }
        set
        {
            this.Control.CellSpacing = value;
        }
    }

    [Parameter]
    public int CellPadding
    {
        get
        {
            return this.Control.CellPadding;
        }
        set
        {
            this.Control.CellPadding = value;
        }
    }

    [Parameter]
    public TableCaptionAlign CaptionAlign
    {
        get
        {
            return this.Control.CaptionAlign;
        }
        set
        {
            this.Control.CaptionAlign = value;
        }
    }

    [Parameter]
    public DayRenderEventHandler OnDayRender
    {
        get
        {
            return _dayRender;
        }
        set
        {
            if (value != null)
            {
                this.Control.DayRender += InvokeDayRender;
            }
            else
            {
                this.Control.DayRender -= InvokeDayRender;
            }
            _dayRender = value;
        }
    }

    [Parameter]
    public EventHandler OnSelectionChanged
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.SelectionChanged += i, i => this.Control.SelectionChanged -= i);
        }
    }

    [Parameter]
    public MonthChangedEventHandler OnVisibleMonthChanged
    {
        get
        {
            return _visibleMonthChanged;
        }
        set
        {
            if (value != null)
            {
                this.Control.VisibleMonthChanged += InvokeVisibleMonthChanged;
            }
            else
            {
                this.Control.VisibleMonthChanged -= InvokeVisibleMonthChanged;
            }
            _visibleMonthChanged = value;
        }
    }

    private void InvokeDayRender(object sender, DayRenderEventArgs e)
    {
        _dayRender.Invoke(sender, e);
    }

    private void InvokeVisibleMonthChanged(object sender, MonthChangedEventArgs e)
    {
        _visibleMonthChanged.Invoke(sender, e);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (this.HasPropertyBindEvent<DateTime>(nameof(this.SelectedDate)))
        {
            this.SetBindEventProperty(nameof(this.OnSelectionChanged), this.BindSelectionChanged, i => this.Control.SelectionChanged += i, i => this.Control.SelectionChanged -= i);
        }
    }

    private void BindSelectionChanged(object sender, EventArgs e)
    {
        this.InvokePropertyBindEvent(nameof(this.SelectedDate), this.SelectedDate);
    }
}
