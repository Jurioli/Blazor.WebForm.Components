@using Blazor.WebForm.UI
@using Blazor.WebForm.UI.ControlComponents
@using System.Web.UI
@using System.Web.UI.WebControls
@inherits DataBoundControlComponent<System.Web.UI.WebControls.GridView>
@this.RenderWithCascading(this.Control, this.ChildContent, this.ChildLevel)
@code {
    private GridViewDeletedEventHandler _rowDeleted;
    private GridViewUpdatedEventHandler _rowUpdated;
    private GridViewCancelEditEventHandler _rowCancelingEdit;
    private GridViewDeleteEventHandler _rowDeleting;
    private GridViewEditEventHandler _rowEditing;
    private GridViewPageEventHandler _pageIndexChanging;
    private GridViewSelectEventHandler _selectedIndexChanging;
    private GridViewUpdateEventHandler _rowUpdating;
    private GridViewCommandEventHandler _rowCommand;
    private GridViewSortEventHandler _sorting;
    private GridViewRowEventHandler _rowDataBound;
    private GridViewRowEventHandler _rowCreated;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int ChildLevel { get; set; } = 4;

    [Parameter]
    public HorizontalAlign HorizontalAlign
    {
        get
        {
            return this.Control.HorizontalAlign;
        }
        set
        {
            this.Control.HorizontalAlign = value;
        }
    }

    [Parameter]
    public GridLines GridLines
    {
        get
        {
            return this.Control.GridLines;
        }
        set
        {
            this.Control.GridLines = value;
        }
    }

    [Parameter]
    public string EmptyDataText
    {
        get
        {
            return this.Control.EmptyDataText;
        }
        set
        {
            this.Control.EmptyDataText = value;
        }
    }

    [Parameter]
    public bool EnableSortingAndPagingCallbacks
    {
        get
        {
            return this.Control.EnableSortingAndPagingCallbacks;
        }
        set
        {
            this.Control.EnableSortingAndPagingCallbacks = value;
        }
    }

    [Parameter]
    public bool EnablePersistedSelection
    {
        get
        {
            return this.Control.EnablePersistedSelection;
        }
        set
        {
            this.Control.EnablePersistedSelection = value;
        }
    }

    [Parameter]
    public bool EnableModelValidation
    {
        get
        {
            return this.Control.EnableModelValidation;
        }
        set
        {
            this.Control.EnableModelValidation = value;
        }
    }

    [Parameter]
    public int EditIndex
    {
        get
        {
            return this.Control.EditIndex;
        }
        set
        {
            if (!this.Initialized)
            {
                return;
            }
            this.Control.EditIndex = value;
        }
    }

    [Parameter]
    public string DataKeyNames
    {
        get
        {
            return this.ConvertToString<StringArrayConverter, string[]>(this.Control.DataKeyNames);
        }
        set
        {
            this.Control.DataKeyNames = this.ConvertFromString<StringArrayConverter, string[]>(value);
        }
    }

    [Parameter]
    public int CellSpacing
    {
        get
        {
            return this.Control.CellSpacing;
        }
        set
        {
            this.Control.CellSpacing = value;
        }
    }

    [Parameter]
    public int CellPadding
    {
        get
        {
            return this.Control.CellPadding;
        }
        set
        {
            this.Control.CellPadding = value;
        }
    }

    [Parameter]
    public TableCaptionAlign CaptionAlign
    {
        get
        {
            return this.Control.CaptionAlign;
        }
        set
        {
            this.Control.CaptionAlign = value;
        }
    }

    [Parameter]
    public string Caption
    {
        get
        {
            return this.Control.Caption;
        }
        set
        {
            this.Control.Caption = value;
        }
    }

    [Parameter]
    public int PageIndex
    {
        get
        {
            return this.Control.PageIndex;
        }
        set
        {
            if (!this.Initialized)
            {
                return;
            }
            this.Control.PageIndex = value;
        }
    }

    [Parameter]
    public bool UseAccessibleHeader
    {
        get
        {
            return this.Control.UseAccessibleHeader;
        }
        set
        {
            this.Control.UseAccessibleHeader = value;
        }
    }

    [Parameter]
    public bool ShowHeaderWhenEmpty
    {
        get
        {
            return this.Control.ShowHeaderWhenEmpty;
        }
        set
        {
            this.Control.ShowHeaderWhenEmpty = value;
        }
    }

    [Parameter]
    public bool ShowHeader
    {
        get
        {
            return this.Control.ShowHeader;
        }
        set
        {
            this.Control.ShowHeader = value;
        }
    }

    [Parameter]
    public bool ShowFooter
    {
        get
        {
            return this.Control.ShowFooter;
        }
        set
        {
            this.Control.ShowFooter = value;
        }
    }

    [Parameter]
    public int SelectedIndex
    {
        get
        {
            return this.Control.SelectedIndex;
        }
        set
        {
            if (!this.Initialized)
            {
                return;
            }
            this.Control.SelectedIndex = value;
        }
    }

    [Parameter]
    public string RowHeaderColumn
    {
        get
        {
            return this.Control.RowHeaderColumn;
        }
        set
        {
            this.Control.RowHeaderColumn = value;
        }
    }

    [Parameter]
    public string ClientIDRowSuffix
    {
        get
        {
            return this.ConvertToString<StringArrayConverter, string[]>(this.Control.ClientIDRowSuffix);
        }
        set
        {
            this.Control.ClientIDRowSuffix = this.ConvertFromString<StringArrayConverter, string[]>(value);
        }
    }

    [Parameter]
    public int PageSize
    {
        get
        {
            return this.Control.PageSize;
        }
        set
        {
            this.Control.PageSize = value;
        }
    }

    [Parameter]
    public string BackImageUrl
    {
        get
        {
            return this.Control.BackImageUrl;
        }
        set
        {
            this.Control.BackImageUrl = value;
        }
    }

    [Parameter]
    public bool AutoGenerateSelectButton
    {
        get
        {
            return this.Control.AutoGenerateSelectButton;
        }
        set
        {
            this.Control.AutoGenerateSelectButton = value;
        }
    }

    //[Parameter]
    //public string UpdateMethod
    //{
    //    get
    //    {
    //        return this.Control.UpdateMethod;
    //    }
    //    set
    //    {
    //        this.Control.UpdateMethod = value;
    //    }
    //}

    //[Parameter]
    //public string DeleteMethod
    //{
    //    get
    //    {
    //        return this.Control.DeleteMethod;
    //    }
    //    set
    //    {
    //        this.Control.DeleteMethod = value;
    //    }
    //}

    [Parameter]
    public bool AllowCustomPaging
    {
        get
        {
            return this.Control.AllowCustomPaging;
        }
        set
        {
            this.Control.AllowCustomPaging = value;
        }
    }

    [Parameter]
    public bool AllowPaging
    {
        get
        {
            return this.Control.AllowPaging;
        }
        set
        {
            this.Control.AllowPaging = value;
        }
    }

    [Parameter]
    public bool AutoGenerateColumns
    {
        get
        {
            return this.Control.AutoGenerateColumns;
        }
        set
        {
            this.Control.AutoGenerateColumns = value;
        }
    }

    [Parameter]
    public bool AutoGenerateDeleteButton
    {
        get
        {
            return this.Control.AutoGenerateDeleteButton;
        }
        set
        {
            this.Control.AutoGenerateDeleteButton = value;
        }
    }

    [Parameter]
    public bool AutoGenerateEditButton
    {
        get
        {
            return this.Control.AutoGenerateEditButton;
        }
        set
        {
            this.Control.AutoGenerateEditButton = value;
        }
    }

    [Parameter]
    public bool AllowSorting
    {
        get
        {
            return this.Control.AllowSorting;
        }
        set
        {
            this.Control.AllowSorting = value;
        }
    }

    protected override void SetInnerPropertyWithCascading(IReadOnlyDictionary<string, object> parameters)
    {
        if (parameters.TryGetValue(nameof(this.EditIndex), out object value1) && value1 is int editIndex)
        {
            if (this.EditIndex != editIndex)
            {
                this.EditIndex = editIndex;
            }
        }
        if (parameters.TryGetValue(nameof(this.PageIndex), out object value2) && value2 is int pageIndex)
        {
            if (this.PageIndex != pageIndex)
            {
                this.PageIndex = pageIndex;
            }
        }
        if (parameters.TryGetValue(nameof(this.SelectedIndex), out object value3) && value3 is int selectedIndex)
        {
            if (this.SelectedIndex != selectedIndex)
            {
                this.SelectedIndex = selectedIndex;
            }
        }
    }

    [Parameter]
    public GridViewDeletedEventHandler OnRowDeleted
    {
        get
        {
            return _rowDeleted;
        }
        set
        {
            if (value != null)
            {
                this.Control.RowDeleted += InvokeRowDeleted;
            }
            else
            {
                this.Control.RowDeleted -= InvokeRowDeleted;
            }
            _rowDeleted = value;
        }
    }

    [Parameter]
    public GridViewUpdatedEventHandler OnRowUpdated
    {
        get
        {
            return _rowUpdated;
        }
        set
        {
            if (value != null)
            {
                this.Control.RowUpdated += InvokeRowUpdated;
            }
            else
            {
                this.Control.RowUpdated -= InvokeRowUpdated;
            }
            _rowUpdated = value;
        }
    }

    [Parameter]
    public GridViewCancelEditEventHandler OnRowCancelingEdit
    {
        get
        {
            return _rowCancelingEdit;
        }
        set
        {
            if (value != null)
            {
                this.Control.RowCancelingEdit += InvokeRowCancelingEdit;
            }
            else
            {
                this.Control.RowCancelingEdit -= InvokeRowCancelingEdit;
            }
            _rowCancelingEdit = value;
        }
    }

    [Parameter]
    public GridViewDeleteEventHandler OnRowDeleting
    {
        get
        {
            return _rowDeleting;
        }
        set
        {
            if (value != null)
            {
                this.Control.RowDeleting += InvokeRowDeleting;
            }
            else
            {
                this.Control.RowDeleting -= InvokeRowDeleting;
            }
            _rowDeleting = value;
        }
    }

    [Parameter]
    public GridViewEditEventHandler OnRowEditing
    {
        get
        {
            return _rowEditing;
        }
        set
        {
            if (value != null)
            {
                this.Control.RowEditing += InvokeRowEditing;
            }
            else
            {
                this.Control.RowEditing -= InvokeRowEditing;
            }
            _rowEditing = value;
        }
    }

    [Parameter]
    public EventHandler OnSelectedIndexChanged
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.SelectedIndexChanged += i, i => this.Control.SelectedIndexChanged -= i);
        }
    }

    [Parameter]
    public GridViewPageEventHandler OnPageIndexChanging
    {
        get
        {
            return _pageIndexChanging;
        }
        set
        {
            if (value != null)
            {
                this.Control.PageIndexChanging += InvokePageIndexChanging;
            }
            else
            {
                this.Control.PageIndexChanging -= InvokePageIndexChanging;
            }
            _pageIndexChanging = value;
        }
    }

    [Parameter]
    public GridViewSelectEventHandler OnSelectedIndexChanging
    {
        get
        {
            return _selectedIndexChanging;
        }
        set
        {
            if (value != null)
            {
                this.Control.SelectedIndexChanging += InvokeSelectedIndexChanging;
            }
            else
            {
                this.Control.SelectedIndexChanging -= InvokeSelectedIndexChanging;
            }
            _selectedIndexChanging = value;
        }
    }

    [Parameter]
    public EventHandler OnSorted
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.Sorted += i, i => this.Control.Sorted -= i);
        }
    }

    [Parameter]
    public GridViewUpdateEventHandler OnRowUpdating
    {
        get
        {
            return _rowUpdating;
        }
        set
        {
            if (value != null)
            {
                this.Control.RowUpdating += InvokeRowUpdating;
            }
            else
            {
                this.Control.RowUpdating -= InvokeRowUpdating;
            }
            _rowUpdating = value;
        }
    }

    [Parameter]
    public GridViewCommandEventHandler OnRowCommand
    {
        get
        {
            return _rowCommand;
        }
        set
        {
            if (value != null)
            {
                this.Control.RowCommand += InvokeRowCommand;
            }
            else
            {
                this.Control.RowCommand -= InvokeRowCommand;
            }
            _rowCommand = value;
        }
    }

    [Parameter]
    public EventHandler OnPageIndexChanged
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.PageIndexChanged += i, i => this.Control.PageIndexChanged -= i);
        }
    }

    [Parameter]
    public GridViewSortEventHandler OnSorting
    {
        get
        {
            return _sorting;
        }
        set
        {
            if (value != null)
            {
                this.Control.Sorting += InvokeSorting;
            }
            else
            {
                this.Control.Sorting -= InvokeSorting;
            }
            _sorting = value;
        }
    }

    [Parameter]
    public GridViewRowEventHandler OnRowDataBound
    {
        get
        {
            return _rowDataBound;
        }
        set
        {
            if (value != null)
            {
                this.Control.RowDataBound += InvokeRowDataBound;
            }
            else
            {
                this.Control.RowDataBound -= InvokeRowDataBound;
            }
            _rowDataBound = value;
        }
    }

    [Parameter]
    public GridViewRowEventHandler OnRowCreated
    {
        get
        {
            return _rowCreated;
        }
        set
        {
            if (value != null)
            {
                this.Control.RowCreated += InvokeRowCreated;
            }
            else
            {
                this.Control.RowCreated -= InvokeRowCreated;
            }
            _rowCreated = value;
        }
    }

    private void InvokeRowDeleted(object sender, GridViewDeletedEventArgs e)
    {
        _rowDeleted.Invoke(sender, e);
    }

    private void InvokeRowUpdated(object sender, GridViewUpdatedEventArgs e)
    {
        _rowUpdated.Invoke(sender, e);
    }

    private void InvokeRowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        _rowCancelingEdit.Invoke(sender, e);
    }

    private void InvokeRowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        _rowDeleting.Invoke(sender, e);
    }

    private void InvokeRowEditing(object sender, GridViewEditEventArgs e)
    {
        _rowEditing.Invoke(sender, e);
    }

    private void InvokePageIndexChanging(object sender, GridViewPageEventArgs e)
    {
        _pageIndexChanging.Invoke(sender, e);
    }

    private void InvokeSelectedIndexChanging(object sender, GridViewSelectEventArgs e)
    {
        _selectedIndexChanging.Invoke(sender, e);
    }

    private void InvokeRowUpdating(object sender, GridViewUpdateEventArgs e)
    {
        _rowUpdating.Invoke(sender, e);
    }

    private void InvokeRowCommand(object sender, GridViewCommandEventArgs e)
    {
        _rowCommand.Invoke(sender, e);
    }

    private void InvokeSorting(object sender, GridViewSortEventArgs e)
    {
        _sorting.Invoke(sender, e);
    }

    private void InvokeRowDataBound(object sender, GridViewRowEventArgs e)
    {
        _rowDataBound.Invoke(sender, e);
    }

    private void InvokeRowCreated(object sender, GridViewRowEventArgs e)
    {
        _rowCreated.Invoke(sender, e);
    }
}
