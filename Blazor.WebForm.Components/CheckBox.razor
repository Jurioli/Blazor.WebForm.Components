@using Blazor.WebForm.UI
@using Blazor.WebForm.UI.ControlComponents
@using System.Web.UI
@using System.Web.UI.WebControls
@inherits WebControlComponent<System.Web.UI.WebControls.CheckBox>
@this.RenderWithInner(this.Control)
@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool AutoPostBack
    {
        get
        {
            return this.Control.AutoPostBack;
        }
        set
        {
            this.Control.AutoPostBack = value;
        }
    }

    [Parameter]
    public bool CausesValidation
    {
        get
        {
            return this.Control.CausesValidation;
        }
        set
        {
            this.Control.CausesValidation = value;
        }
    }

    [Parameter]
    public bool Checked
    {
        get
        {
            return this.Control.Checked;
        }
        set
        {
            this.Control.Checked = value;
        }
    }

    [Parameter]
    public string Text
    {
        get
        {
            return this.Control.Text;
        }
        set
        {
            this.Control.Text = value;
        }
    }

    [Parameter]
    public TextAlign TextAlign
    {
        get
        {
            return this.Control.TextAlign;
        }
        set
        {
            this.Control.TextAlign = value;
        }
    }

    [Parameter]
    public LabelMode LabelMode
    {
        get
        {
            return this.Control.LabelMode;
        }
        set
        {
            this.Control.LabelMode = value;
        }
    }

    [Parameter]
    public string ValidationGroup
    {
        get
        {
            return this.Control.ValidationGroup;
        }
        set
        {
            this.Control.ValidationGroup = value;
        }
    }

    [Parameter]
    public EventHandler OnCheckedChanged
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.CheckedChanged += i, i => this.Control.CheckedChanged -= i);
        }
    }

    //public AttributeCollection InputAttributes
    //{
    //    get
    //    {
    //        return this.Control.InputAttributes;
    //    }
    //}

    //public AttributeCollection LabelAttributes
    //{
    //    get
    //    {
    //        return this.Control.LabelAttributes;
    //    }
    //}

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (this.HasPropertyBindEvent<bool>(nameof(this.Checked)))
        {
            this.Control.AutoPostBack = true;
            this.SetBindEventProperty(nameof(this.OnCheckedChanged), this.BindCheckedChanged, i => this.Control.CheckedChanged += i, i => this.Control.CheckedChanged -= i);
        }
    }

    private void BindCheckedChanged(object sender, EventArgs e)
    {
        this.InvokePropertyBindEvent(nameof(this.OnCheckedChanged), sender, e, nameof(this.Checked), this.Checked);
    }

    protected override void SetInnerPropertyWithInner(IReadOnlyDictionary<string, object> parameters)
    {
        if (parameters.ContainsKey(nameof(this.ChildContent)) && this.ChildContent != null)
        {
            RenderUtility.SetContentString(this.Control, this.ChildContent);
        }
    }
}
