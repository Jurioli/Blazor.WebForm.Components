@using Blazor.WebForm.UI
@using Blazor.WebForm.UI.ControlComponents
@using System.Web.UI
@using System.Web.UI.WebControls
@inherits WebControlComponent<System.Web.UI.WebControls.ValidationSummary>
@this.RenderWithInner(this.Control)
@code {
    [Parameter]
    public ValidationSummaryDisplayMode DisplayMode
    {
        get
        {
            return this.Control.DisplayMode;
        }
        set
        {
            this.Control.DisplayMode = value;
        }
    }

    [Parameter]
    public bool EnableClientScript
    {
        get
        {
            return this.Control.EnableClientScript;
        }
        set
        {
            this.Control.EnableClientScript = value;
        }
    }

    [Parameter]
    public bool ShowValidationErrors
    {
        get
        {
            return this.Control.ShowValidationErrors;
        }
        set
        {
            this.Control.ShowValidationErrors = value;
        }
    }

    [Parameter]
    public bool ShowModelStateErrors
    {
        get
        {
            return this.Control.ShowModelStateErrors;
        }
        set
        {
            this.Control.ShowModelStateErrors = value;
        }
    }

    [Parameter]
    public string HeaderText
    {
        get
        {
            return this.Control.HeaderText;
        }
        set
        {
            this.Control.HeaderText = value;
        }
    }

    [Parameter]
    public bool ShowMessageBox
    {
        get
        {
            return this.Control.ShowMessageBox;
        }
        set
        {
            this.Control.ShowMessageBox = value;
        }
    }

    [Parameter]
    public bool ShowSummary
    {
        get
        {
            return this.Control.ShowSummary;
        }
        set
        {
            this.Control.ShowSummary = value;
        }
    }

    [Parameter]
    public string ValidationGroup
    {
        get
        {
            return this.Control.ValidationGroup;
        }
        set
        {
            this.Control.ValidationGroup = value;
        }
    }

    protected override void SetInnerPropertyWithInner(IReadOnlyDictionary<string, object> parameters, ref bool hasInnerContent)
    {
        if (!parameters.ContainsKey(nameof(this.ID)) && string.IsNullOrEmpty(this.ID))
        {
            this.ID = Guid.NewGuid().ToString("N");
        }
    }
}
