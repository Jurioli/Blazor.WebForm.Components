@using Blazor.WebForm.UI
@using Blazor.WebForm.UI.ControlComponents
@using System.Collections
@using System.Web.UI
@using System.Web.UI.WebControls
@inherits UserControlComponent<Extensions.Web.UI.WebControls.FreeDataSource>
@this.Render(this.Control)
@code {
    private OnExecuteSorted _executeSorted;
    private OnExecuteUpdated _executeUpdated;
    private OnExecuteUpdatedAsync _executeUpdatedAsync;
    private OnExecuteSelected _executeSelected;
    private OnExecuteDeleted _executeDeleted;
    private OnExecuteDeletedAsync _executeDeletedAsync;
    private OnExecuteInserted _executeInserted;
    private OnExecuteInsertedAsync _executeInsertedAsync;

    [Parameter]
    public bool AutoSort
    {
        get
        {
            return this.Control.AutoSort;
        }
        set
        {
            this.Control.AutoSort = value;
        }
    }

    [Parameter]
    public string PaginationControlID
    {
        get
        {
            return this.Control.PaginationControlID;
        }
        set
        {
            this.Control.PaginationControlID = value;
        }
    }

    [Parameter]
    public bool UseCollection
    {
        get
        {
            return this.Control.UseCollection;
        }
        set
        {
            this.Control.UseCollection = value;
        }
    }

    [Parameter]
    public OnExecuteSorted OnExecuteSorted
    {
        get
        {
            return _executeSorted;
        }
        set
        {
            if (value != null)
            {
                this.Control.ExecuteSorted += InvokeExecuteSorted;
            }
            else
            {
                this.Control.ExecuteSorted -= InvokeExecuteSorted;
            }
            _executeSorted = value;
        }
    }

    [Parameter]
    public OnExecuteUpdated OnExecuteUpdated
    {
        get
        {
            return _executeUpdated;
        }
        set
        {
            if (value != null)
            {
                this.Control.ExecuteUpdated += InvokeExecuteUpdated;
            }
            else
            {
                this.Control.ExecuteUpdated -= InvokeExecuteUpdated;
            }
            _executeUpdated = value;
        }
    }

    [Parameter]
    public OnExecuteUpdatedAsync OnExecuteUpdatedAsync
    {
        get
        {
            return _executeUpdatedAsync;
        }
        set
        {
            if (value != null)
            {
                this.Control.ExecuteUpdatedAsync += InvokeExecuteUpdatedAsync;
            }
            else
            {
                this.Control.ExecuteUpdatedAsync -= InvokeExecuteUpdatedAsync;
            }
            _executeUpdatedAsync = value;
        }
    }

    [Parameter]
    public EventHandler OnDataSourceChanged
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.DataSourceChanged += i, i => this.Control.DataSourceChanged -= i);
        }
    }

    [Parameter]
    public OnExecuteSelected OnExecuteSelected
    {
        get
        {
            return _executeSelected;
        }
        set
        {
            if (value != null)
            {
                this.Control.ExecuteSelected += InvokeExecuteSelected;
            }
            else
            {
                this.Control.ExecuteSelected -= InvokeExecuteSelected;
            }
            _executeSelected = value;
        }
    }

    [Parameter]
    public OnExecuteInserted OnExecuteInserted
    {
        get
        {
            return _executeInserted;
        }
        set
        {
            if (value != null)
            {
                this.Control.ExecuteInserted += InvokeExecuteInserted;
            }
            else
            {
                this.Control.ExecuteInserted -= InvokeExecuteInserted;
            }
            _executeInserted = value;
        }
    }

    [Parameter]
    public OnExecuteInsertedAsync OnExecuteInsertedAsync
    {
        get
        {
            return _executeInsertedAsync;
        }
        set
        {
            if (value != null)
            {
                this.Control.ExecuteInsertedAsync += InvokeExecuteInsertedAsync;
            }
            else
            {
                this.Control.ExecuteInsertedAsync -= InvokeExecuteInsertedAsync;
            }
            _executeInsertedAsync = value;
        }
    }

    [Parameter]
    public OnExecuteDeleted OnExecuteDeleted
    {
        get
        {
            return _executeDeleted;
        }
        set
        {
            if (value != null)
            {
                this.Control.ExecuteDeleted += InvokeExecuteDeleted;
            }
            else
            {
                this.Control.ExecuteDeleted -= InvokeExecuteDeleted;
            }
            _executeDeleted = value;
        }
    }

    [Parameter]
    public OnExecuteDeletedAsync OnExecuteDeletedAsync
    {
        get
        {
            return _executeDeletedAsync;
        }
        set
        {
            if (value != null)
            {
                this.Control.ExecuteDeletedAsync += InvokeExecuteDeletedAsync;
            }
            else
            {
                this.Control.ExecuteDeletedAsync -= InvokeExecuteDeletedAsync;
            }
            _executeDeletedAsync = value;
        }
    }

    private void InvokeExecuteSorted(object sender, ref IEnumerable enumerable, DataSourceSelectArguments arguments)
    {
        _executeSorted.Invoke(sender, ref enumerable, arguments);
    }

    private void InvokeExecuteUpdated(object sender, IDictionary keys, IDictionary values, IDictionary oldValues)
    {
        _executeUpdated.Invoke(sender, keys, values, oldValues);
    }

    private Task InvokeExecuteUpdatedAsync(object sender, IDictionary keys, IDictionary values, IDictionary oldValues)
    {
        return _executeUpdatedAsync.Invoke(sender, keys, values, oldValues);
    }

    private IEnumerable InvokeExecuteSelected(object sender)
    {
        return _executeSelected.Invoke(sender);
    }

    private void InvokeExecuteDeleted(object sender, IDictionary keys, IDictionary oldValues)
    {
        _executeDeleted.Invoke(sender, keys, oldValues);
    }

    private Task InvokeExecuteDeletedAsync(object sender, IDictionary keys, IDictionary oldValues)
    {
        return _executeDeletedAsync.Invoke(sender, keys, oldValues);
    }

    private void InvokeExecuteInserted(object sender, IDictionary values)
    {
        _executeInserted.Invoke(sender, values);
    }

    private Task InvokeExecuteInsertedAsync(object sender, IDictionary values)
    {
        return _executeInsertedAsync.Invoke(sender, values);
    }
}
