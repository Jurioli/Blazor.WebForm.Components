@using Blazor.WebForm.UI
@using Blazor.WebForm.UI.ControlComponents
@using System.Web.UI
@using System.Web.UI.WebControls
@inherits ControlComponentBase<System.Web.UI.WebControls.MultiView>
@this.RenderWithCascading(this.Control, this.ChildContent, this.ChildLevel)
@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int ChildLevel { get; set; } = 1;

    [Parameter]
    public int ActiveViewIndex
    {
        get
        {
            return this.Control.ActiveViewIndex;
        }
        set
        {
            if (!this.Initialized)
            {
                return;
            }
            this.Control.ActiveViewIndex = value;
        }
    }

    [Parameter]
    public EventHandler OnActiveViewChanged
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.ActiveViewChanged += i, i => this.Control.ActiveViewChanged -= i);
        }
    }

    //public View GetActiveView()
    //{
    //    return this.Control.GetActiveView();
    //}

    //public void SetActiveView(View view)
    //{
    //    this.Control.SetActiveView(view);
    //}

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (this.HasPropertyBindEvent<int>(nameof(this.ActiveViewIndex)))
        {
            this.SetBindEventProperty(nameof(this.OnActiveViewChanged), this.BindActiveViewChanged, i => this.Control.ActiveViewChanged += i, i => this.Control.ActiveViewChanged -= i);
        }
    }

    private void BindActiveViewChanged(object sender, EventArgs e)
    {
        this.InvokePropertyBindEvent(nameof(this.ActiveViewIndex), this.ActiveViewIndex);
    }

    protected override void SetInnerPropertyWithCascading(IReadOnlyDictionary<string, object> parameters)
    {
        if (parameters.TryGetValue(nameof(this.ActiveViewIndex), out object value) && value is int activeViewIndex)
        {
            if (this.ActiveViewIndex != activeViewIndex)
            {
                this.ActiveViewIndex = activeViewIndex;
            }
        }
    }
}
