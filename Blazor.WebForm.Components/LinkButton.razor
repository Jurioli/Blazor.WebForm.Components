@using Blazor.WebForm.UI
@using Blazor.WebForm.UI.ControlComponents
@using System.Web.UI
@using System.Web.UI.WebControls
@inherits WebControlComponent<System.Web.UI.WebControls.LinkButton>
@this.RenderWithInner(this.Control)
@code {
    private CommandEventHandler _command;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string ValidationGroup
    {
        get
        {
            return this.Control.ValidationGroup;
        }
        set
        {
            this.Control.ValidationGroup = value;
        }
    }

    //[Parameter]
    //public bool UseSubmitBehavior
    //{
    //    get
    //    {
    //        return this.Control.UseSubmitBehavior;
    //    }
    //    set
    //    {
    //        this.Control.UseSubmitBehavior = value;
    //    }
    //}

    [Parameter]
    public string Text
    {
        get
        {
            return this.Control.Text;
        }
        set
        {
            this.Control.Text = value;
        }
    }

    [Parameter]
    public string OnClientClick
    {
        get
        {
            return this.Control.OnClientClick;
        }
        set
        {
            this.Control.OnClientClick = value;
        }
    }

    [Parameter]
    public bool CausesValidation
    {
        get
        {
            return this.Control.CausesValidation;
        }
        set
        {
            this.Control.CausesValidation = value;
        }
    }

    [Parameter]
    public string CommandArgument
    {
        get
        {
            return this.Control.CommandArgument;
        }
        set
        {
            this.Control.CommandArgument = value;
        }
    }

    [Parameter]
    public string CommandName
    {
        get
        {
            return this.Control.CommandName;
        }
        set
        {
            this.Control.CommandName = value;
        }
    }

    [Parameter]
    public EventHandler OnClick
    {
        get
        {
            return this.GetEventProperty();
        }
        set
        {
            this.SetEventProperty(value, i => this.Control.Click += i, i => this.Control.Click -= i);
        }
    }

    [Parameter]
    public CommandEventHandler OnCommand
    {
        get
        {
            return _command;
        }
        set
        {
            if (value != null)
            {
                this.Control.Command += InvokeCommand;
            }
            else
            {
                this.Control.Command -= InvokeCommand;
            }
            _command = value;
        }
    }

    private void InvokeCommand(object sender, CommandEventArgs e)
    {
        _command.Invoke(sender, e);
    }

    protected override void SetInnerPropertyWithInner(IReadOnlyDictionary<string, object> parameters)
    {
        if (parameters.ContainsKey(nameof(this.ChildContent)) && this.ChildContent != null)
        {
            this.Text = RenderUtility.GetContentString(this.ChildContent);
        }
    }
}
