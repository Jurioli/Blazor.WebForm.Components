@using Blazor.WebForm.UI
@using Blazor.WebForm.UI.ControlComponents
@using System.Web.UI
@using System.Web.UI.WebControls
@inherits ImageWebControlComponent<System.Web.UI.WebControls.ImageButton>
@this.Render(this.Control)
@code {
    private ImageClickEventHandler _click;
    private CommandEventHandler _command;

    [Parameter]
    public string AlternateText
    {
        get
        {
            return this.Control.AlternateText;
        }
        set
        {
            this.Control.AlternateText = value;
        }
    }

    [Parameter]
    public string DescriptionUrl
    {
        get
        {
            return this.Control.DescriptionUrl;
        }
        set
        {
            this.Control.DescriptionUrl = value;
        }
    }

    [Parameter]
    public ImageAlign ImageAlign
    {
        get
        {
            return this.Control.ImageAlign;
        }
        set
        {
            this.Control.ImageAlign = value;
        }
    }

    [Parameter]
    public string ImageUrl
    {
        get
        {
            return this.Control.ImageUrl;
        }
        set
        {
            this.Control.ImageUrl = value;
        }
    }

    [Parameter]
    public string ValidationGroup
    {
        get
        {
            return this.Control.ValidationGroup;
        }
        set
        {
            this.Control.ValidationGroup = value;
        }
    }

    //[Parameter]
    //public string PostBackUrl
    //{
    //    get
    //    {
    //        return this.Control.PostBackUrl;
    //    }
    //    set
    //    {
    //        this.Control.PostBackUrl = value;
    //    }
    //}

    [Parameter]
    public string OnClientClick
    {
        get
        {
            return this.Control.OnClientClick;
        }
        set
        {
            this.Control.OnClientClick = value;
        }
    }

    [Parameter]
    public bool CausesValidation
    {
        get
        {
            return this.Control.CausesValidation;
        }
        set
        {
            this.Control.CausesValidation = value;
        }
    }

    [Parameter]
    public string CommandName
    {
        get
        {
            return this.Control.CommandName;
        }
        set
        {
            this.Control.CommandName = value;
        }
    }

    [Parameter]
    public string CommandArgument
    {
        get
        {
            return this.Control.CommandArgument;
        }
        set
        {
            this.Control.CommandArgument = value;
        }
    }

    [Parameter]
    public ImageClickEventHandler OnClick
    {
        get
        {
            return _click;
        }
        set
        {
            if (value != null)
            {
                this.Control.Click += InvokeClick;
            }
            else
            {
                this.Control.Click -= InvokeClick;
            }
            _click = value;
        }
    }

    [Parameter]
    public CommandEventHandler OnCommand
    {
        get
        {
            return _command;
        }
        set
        {
            if (value != null)
            {
                this.Control.Command += InvokeCommand;
            }
            else
            {
                this.Control.Command -= InvokeCommand;
            }
            _command = value;
        }
    }

    private void InvokeClick(object sender, ImageClickEventArgs e)
    {
        _click.Invoke(sender, e);
    }

    private void InvokeCommand(object sender, CommandEventArgs e)
    {
        _command.Invoke(sender, e);
    }
}
